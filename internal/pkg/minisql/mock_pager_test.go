// Code generated by mockery v2.17.0. DO NOT EDIT.

package minisql

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockPager is an autogenerated mock type for the Pager type
type MockPager struct {
	mock.Mock
}

// FileSize provides a mock function with given fields:
func (_m *MockPager) FileSize() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Flush provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockPager) Flush(_a0 context.Context, _a1 uint32, _a2 int64) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, int64) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPage provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockPager) GetPage(_a0 context.Context, _a1 string, _a2 uint32) (*Page, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *Page
	if rf, ok := ret.Get(0).(func(context.Context, string, uint32) *Page); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Page)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, uint32) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockPager interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockPager creates a new instance of MockPager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockPager(t mockConstructorTestingTNewMockPager) *MockPager {
	mock := &MockPager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
