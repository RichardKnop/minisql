// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package minisql

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockParser creates a new instance of MockParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockParser {
	mock := &MockParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockParser is an autogenerated mock type for the Parser type
type MockParser struct {
	mock.Mock
}

type MockParser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockParser) EXPECT() *MockParser_Expecter {
	return &MockParser_Expecter{mock: &_m.Mock}
}

// Parse provides a mock function for the type MockParser
func (_mock *MockParser) Parse(context1 context.Context, s string) ([]Statement, error) {
	ret := _mock.Called(context1, s)

	if len(ret) == 0 {
		panic("no return value specified for Parse")
	}

	var r0 []Statement
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]Statement, error)); ok {
		return returnFunc(context1, s)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []Statement); ok {
		r0 = returnFunc(context1, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Statement)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(context1, s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockParser_Parse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parse'
type MockParser_Parse_Call struct {
	*mock.Call
}

// Parse is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
func (_e *MockParser_Expecter) Parse(context1 interface{}, s interface{}) *MockParser_Parse_Call {
	return &MockParser_Parse_Call{Call: _e.mock.On("Parse", context1, s)}
}

func (_c *MockParser_Parse_Call) Run(run func(context1 context.Context, s string)) *MockParser_Parse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockParser_Parse_Call) Return(statements []Statement, err error) *MockParser_Parse_Call {
	_c.Call.Return(statements, err)
	return _c
}

func (_c *MockParser_Parse_Call) RunAndReturn(run func(context1 context.Context, s string) ([]Statement, error)) *MockParser_Parse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPager creates a new instance of MockPager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPager {
	mock := &MockPager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPager is an autogenerated mock type for the Pager type
type MockPager struct {
	mock.Mock
}

type MockPager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPager) EXPECT() *MockPager_Expecter {
	return &MockPager_Expecter{mock: &_m.Mock}
}

// AddFreePage provides a mock function for the type MockPager
func (_mock *MockPager) AddFreePage(context1 context.Context, v uint32) error {
	ret := _mock.Called(context1, v)

	if len(ret) == 0 {
		panic("no return value specified for AddFreePage")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint32) error); ok {
		r0 = returnFunc(context1, v)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPager_AddFreePage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFreePage'
type MockPager_AddFreePage_Call struct {
	*mock.Call
}

// AddFreePage is a helper method to define mock.On call
//   - context1 context.Context
//   - v uint32
func (_e *MockPager_Expecter) AddFreePage(context1 interface{}, v interface{}) *MockPager_AddFreePage_Call {
	return &MockPager_AddFreePage_Call{Call: _e.mock.On("AddFreePage", context1, v)}
}

func (_c *MockPager_AddFreePage_Call) Run(run func(context1 context.Context, v uint32)) *MockPager_AddFreePage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uint32
		if args[1] != nil {
			arg1 = args[1].(uint32)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPager_AddFreePage_Call) Return(err error) *MockPager_AddFreePage_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPager_AddFreePage_Call) RunAndReturn(run func(context1 context.Context, v uint32) error) *MockPager_AddFreePage_Call {
	_c.Call.Return(run)
	return _c
}

// Flush provides a mock function for the type MockPager
func (_mock *MockPager) Flush(context1 context.Context, v uint32) error {
	ret := _mock.Called(context1, v)

	if len(ret) == 0 {
		panic("no return value specified for Flush")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint32) error); ok {
		r0 = returnFunc(context1, v)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPager_Flush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flush'
type MockPager_Flush_Call struct {
	*mock.Call
}

// Flush is a helper method to define mock.On call
//   - context1 context.Context
//   - v uint32
func (_e *MockPager_Expecter) Flush(context1 interface{}, v interface{}) *MockPager_Flush_Call {
	return &MockPager_Flush_Call{Call: _e.mock.On("Flush", context1, v)}
}

func (_c *MockPager_Flush_Call) Run(run func(context1 context.Context, v uint32)) *MockPager_Flush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uint32
		if args[1] != nil {
			arg1 = args[1].(uint32)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPager_Flush_Call) Return(err error) *MockPager_Flush_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPager_Flush_Call) RunAndReturn(run func(context1 context.Context, v uint32) error) *MockPager_Flush_Call {
	_c.Call.Return(run)
	return _c
}

// GetFreePage provides a mock function for the type MockPager
func (_mock *MockPager) GetFreePage(context1 context.Context) (*Page, error) {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for GetFreePage")
	}

	var r0 *Page
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*Page, error)); ok {
		return returnFunc(context1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *Page); ok {
		r0 = returnFunc(context1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Page)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(context1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPager_GetFreePage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFreePage'
type MockPager_GetFreePage_Call struct {
	*mock.Call
}

// GetFreePage is a helper method to define mock.On call
//   - context1 context.Context
func (_e *MockPager_Expecter) GetFreePage(context1 interface{}) *MockPager_GetFreePage_Call {
	return &MockPager_GetFreePage_Call{Call: _e.mock.On("GetFreePage", context1)}
}

func (_c *MockPager_GetFreePage_Call) Run(run func(context1 context.Context)) *MockPager_GetFreePage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPager_GetFreePage_Call) Return(page *Page, err error) *MockPager_GetFreePage_Call {
	_c.Call.Return(page, err)
	return _c
}

func (_c *MockPager_GetFreePage_Call) RunAndReturn(run func(context1 context.Context) (*Page, error)) *MockPager_GetFreePage_Call {
	_c.Call.Return(run)
	return _c
}

// ModifyPage provides a mock function for the type MockPager
func (_mock *MockPager) ModifyPage(context1 context.Context, v uint32) (*Page, error) {
	ret := _mock.Called(context1, v)

	if len(ret) == 0 {
		panic("no return value specified for ModifyPage")
	}

	var r0 *Page
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint32) (*Page, error)); ok {
		return returnFunc(context1, v)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint32) *Page); ok {
		r0 = returnFunc(context1, v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Page)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = returnFunc(context1, v)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPager_ModifyPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ModifyPage'
type MockPager_ModifyPage_Call struct {
	*mock.Call
}

// ModifyPage is a helper method to define mock.On call
//   - context1 context.Context
//   - v uint32
func (_e *MockPager_Expecter) ModifyPage(context1 interface{}, v interface{}) *MockPager_ModifyPage_Call {
	return &MockPager_ModifyPage_Call{Call: _e.mock.On("ModifyPage", context1, v)}
}

func (_c *MockPager_ModifyPage_Call) Run(run func(context1 context.Context, v uint32)) *MockPager_ModifyPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uint32
		if args[1] != nil {
			arg1 = args[1].(uint32)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPager_ModifyPage_Call) Return(page *Page, err error) *MockPager_ModifyPage_Call {
	_c.Call.Return(page, err)
	return _c
}

func (_c *MockPager_ModifyPage_Call) RunAndReturn(run func(context1 context.Context, v uint32) (*Page, error)) *MockPager_ModifyPage_Call {
	_c.Call.Return(run)
	return _c
}

// ReadPage provides a mock function for the type MockPager
func (_mock *MockPager) ReadPage(context1 context.Context, v uint32) (*Page, error) {
	ret := _mock.Called(context1, v)

	if len(ret) == 0 {
		panic("no return value specified for ReadPage")
	}

	var r0 *Page
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint32) (*Page, error)); ok {
		return returnFunc(context1, v)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint32) *Page); ok {
		r0 = returnFunc(context1, v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Page)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = returnFunc(context1, v)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPager_ReadPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadPage'
type MockPager_ReadPage_Call struct {
	*mock.Call
}

// ReadPage is a helper method to define mock.On call
//   - context1 context.Context
//   - v uint32
func (_e *MockPager_Expecter) ReadPage(context1 interface{}, v interface{}) *MockPager_ReadPage_Call {
	return &MockPager_ReadPage_Call{Call: _e.mock.On("ReadPage", context1, v)}
}

func (_c *MockPager_ReadPage_Call) Run(run func(context1 context.Context, v uint32)) *MockPager_ReadPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uint32
		if args[1] != nil {
			arg1 = args[1].(uint32)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPager_ReadPage_Call) Return(page *Page, err error) *MockPager_ReadPage_Call {
	_c.Call.Return(page, err)
	return _c
}

func (_c *MockPager_ReadPage_Call) RunAndReturn(run func(context1 context.Context, v uint32) (*Page, error)) *MockPager_ReadPage_Call {
	_c.Call.Return(run)
	return _c
}
