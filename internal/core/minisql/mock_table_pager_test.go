// Code generated by mockery v2.53.2. DO NOT EDIT.

package minisql

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockTablePager is an autogenerated mock type for the TablePager type
type MockTablePager struct {
	mock.Mock
}

// AddFreePage provides a mock function with given fields: _a0, _a1
func (_m *MockTablePager) AddFreePage(_a0 context.Context, _a1 uint32) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddFreePage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Flush provides a mock function with given fields: _a0, _a1
func (_m *MockTablePager) Flush(_a0 context.Context, _a1 uint32) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Flush")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFreePage provides a mock function with given fields: _a0
func (_m *MockTablePager) GetFreePage(_a0 context.Context) (*Page, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetFreePage")
	}

	var r0 *Page
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*Page, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *Page); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Page)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPage provides a mock function with given fields: _a0, _a1
func (_m *MockTablePager) GetPage(_a0 context.Context, _a1 uint32) (*Page, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPage")
	}

	var r0 *Page
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) (*Page, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32) *Page); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Page)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TotalPages provides a mock function with no fields
func (_m *MockTablePager) TotalPages() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TotalPages")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// NewMockTablePager creates a new instance of MockTablePager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTablePager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTablePager {
	mock := &MockTablePager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
